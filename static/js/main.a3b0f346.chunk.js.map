{"version":3,"sources":["taskboard/TaskboardTypes.ts","shared/SharedUtils.ts","taskboard/TaskboardItemFormModal.tsx","shared/BaseTooltip.tsx","taskboard/TaskboardItemCard.tsx","taskboard/TaskboardCol.tsx","taskboard/Taskboard.tsx","shared/SharedHooks.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskboardItemStatus","colors","primary","geekblue","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","Form","useForm","form","inputRef","useRef","useEffect","current","focus","resetFields","title","destroyOnClose","forceRender","submit","autoComplete","layout","onFinish","values","Item","name","label","rules","required","message","max","ref","autoFocus","TextArea","rows","BaseTooltip","props","mouseEnterDelay","StyledCard","styled","Card","$isDragging","TaskboardItemCardTitle","Typography","Title","DeleteMenuItem","Menu","red","TaskboardItemCard","item","status","isDragging","onEdit","onDelete","size","overlay","level","ellipsis","extra","icon","EditOutlined","onClick","DeleteOutlined","Modal","confirm","content","itemToDelete","trigger","MoreOutlined","description","Paragraph","type","TaskboardColRoot","DroppableRoot","div","isDraggingOver","TaskboardCol","items","onClickAdd","length","droppableId","provided","snapshot","innerRef","droppableProps","map","index","draggableId","id","draggableProps","dragHandleProps","placeholder","TaskboardRoot","TaskboardContent","defaultItems","TO_DO","IN_PROGRESS","DONE","Taskboard","key","initialValue","getValueFromStorage","useCallback","goTrySync","JSON","parse","localStorage","getItem","data","useState","state","setState","handleStorageChange","window","addEventListener","removeEventListener","setItem","stringify","useSyncedState","itemsByStatus","setItemsByStatus","isModalVisible","setIsModalVisible","itemToEdit","setItemToEdit","openTaskItemModal","handleDelete","produce","draft","filter","useMemo","onDragEnd","source","destination","splice","removed","Object","undefined","draftItem","flatMap","find","push","Date","now","toString","StyledLayout","Layout","StyledHeader","Header","StyledContent","Content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3b0f346.chunk.js","sourcesContent":["export interface TaskboardItem {\n  id: string;\n  title: string;\n  description: string;\n}\n\nexport enum TaskboardItemStatus {\n  TO_DO = 'To Do',\n  IN_PROGRESS = 'In Progress',\n  DONE = 'Done',\n}\n","import { geekblue } from '@ant-design/colors';\n\nexport const colors = {\n  primary: geekblue,\n};\n","import { useEffect, useRef } from 'react';\nimport { Modal, Form, ModalProps, Input } from 'antd';\nimport { TaskboardItem } from './TaskboardTypes';\n\nexport type TaskboardItemFormValues = Pick<\n  TaskboardItem,\n  'title' | 'description'\n>;\n\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\n  initialValues: TaskboardItemFormValues;\n  onCancel: VoidFunction;\n  onOk: (values: TaskboardItemFormValues) => void;\n};\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk,\n}: TaskboardItemFormModalProps) {\n  const [form] = Form.useForm<TaskboardItemFormValues>();\n\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (visible) {\n      // Focus on the first input when the modal is opened\n      inputRef.current?.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  return (\n    <Modal\n      title=\"Add Item\"\n      visible={visible}\n      destroyOnClose\n      // To make dynamically changing initialValues work with Form\n      forceRender\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        onFinish={(values) => {\n          onOk(values);\n          form.resetFields();\n          onCancel();\n        }}\n      >\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            { required: true, message: \"'Title' is required\" },\n            {\n              max: 100,\n              message: \"'Title' can not be longer than 100 characters\",\n            },\n          ]}\n        >\n          <Input ref={inputRef} autoFocus />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            { required: true, message: \"'Description' is required\" },\n            {\n              max: 400,\n              message: \"'Description' can not be longer than 400 characters\",\n            },\n          ]}\n        >\n          <Input.TextArea rows={4} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default TaskboardItemFormModal;\n","import { Tooltip, TooltipProps } from 'antd';\n\ntype BaseTooltipProps = TooltipProps;\n\nfunction BaseTooltip(props: BaseTooltipProps) {\n  return <Tooltip mouseEnterDelay={1.5} {...props} />;\n}\n\nexport default BaseTooltip;\n","import React from 'react';\nimport { Button, Card, Modal, Typography, Dropdown, Menu } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport { DeleteOutlined, EditOutlined, MoreOutlined } from '@ant-design/icons';\nimport { red } from '@ant-design/colors';\nimport styled from 'styled-components';\nimport BaseTooltip from '../shared/BaseTooltip';\n\ninterface StyledCardProps {\n  $isDragging: boolean;\n}\n\nconst StyledCard = styled(Card)<StyledCardProps>`\n  margin: 0.5rem;\n  padding: 0.5rem;\n  background-color: ${({ $isDragging }) => ($isDragging ? '#fafafa' : '#fff')};\n`;\n\nconst TaskboardItemCardTitle = styled(Typography.Title)`\n  white-space: pre-wrap;\n  // To make ellipsis of the title visible.\n  // Without this margin, it can be go behind the \"extra\" component.\n  // So, we give it a little space.\n  margin-right: 0.25rem;\n`;\n\nconst DeleteMenuItem = styled(Menu.Item)`\n  color: ${red.primary};\n`;\n\nexport interface TaskboardItemCardProps {\n  item: TaskboardItem;\n  isDragging: boolean;\n  status: TaskboardItemStatus;\n  onEdit: (itemToEdit: TaskboardItem) => void;\n  onDelete: (args: {\n    status: TaskboardItemStatus;\n    itemToDelete: TaskboardItem;\n  }) => void;\n}\n\nfunction TaskboardItemCard({\n  item,\n  status,\n  isDragging,\n  onEdit,\n  onDelete,\n}: TaskboardItemCardProps) {\n  return (\n    <StyledCard\n      $isDragging={isDragging}\n      size=\"small\"\n      title={\n        <BaseTooltip overlay={item.title}>\n          {/* styled(Typography.Title) throws an error in console about \n          forwarding ref in function components.\n          Because Typography.Title doesn't accept a ref.\n          So, we just placed a span tag here. */}\n          <span>\n            <TaskboardItemCardTitle level={5} ellipsis={{ rows: 2 }}>\n              {item.title}\n            </TaskboardItemCardTitle>\n          </span>\n        </BaseTooltip>\n      }\n      extra={\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item icon={<EditOutlined />} onClick={() => onEdit(item)}>\n                Edit\n              </Menu.Item>\n              <DeleteMenuItem\n                icon={<DeleteOutlined />}\n                onClick={() =>\n                  Modal.confirm({\n                    title: 'Delete?',\n                    content: `Are you sure to delete \"${item.title}\"?`,\n                    onOk: () =>\n                      onDelete({\n                        status,\n                        itemToDelete: item,\n                      }),\n                  })\n                }\n              >\n                Delete\n              </DeleteMenuItem>\n            </Menu>\n          }\n          trigger={['click']}\n        >\n          <Button size=\"small\" icon={<MoreOutlined />} />\n        </Dropdown>\n      }\n    >\n      <BaseTooltip overlay={item.description}>\n        <Typography.Paragraph type=\"secondary\" ellipsis={{ rows: 2 }}>\n          {item.description}\n        </Typography.Paragraph>\n      </BaseTooltip>\n    </StyledCard>\n  );\n}\n\nexport default TaskboardItemCard;\n","import { Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { Button, Card } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemCard, { TaskboardItemCardProps } from './TaskboardItemCard';\nimport { colors } from '../shared/SharedUtils';\n\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n`;\n\ninterface DroppableRootProps {\n  isDraggingOver: boolean;\n}\n\nconst DroppableRoot = styled.div<DroppableRootProps>`\n  height: 100%;\n  overflow-y: auto;\n  background-color: ${({ isDraggingOver }) =>\n    isDraggingOver ? colors.primary[2] : colors.primary[1]};\n`;\n\nexport type TaskboardColProps = Pick<\n  TaskboardItemCardProps,\n  'onEdit' | 'onDelete'\n> & {\n  items: TaskboardItem[];\n  status: TaskboardItemStatus;\n  onClickAdd?: VoidFunction;\n};\n\nfunction TaskboardCol({\n  items,\n  status,\n  onClickAdd,\n  onEdit,\n  onDelete,\n}: TaskboardColProps) {\n  return (\n    <TaskboardColRoot\n      title={`${status} (${items.length})`}\n      extra={\n        onClickAdd && (\n          <Button type=\"primary\" onClick={onClickAdd}>\n            Add\n          </Button>\n        )\n      }\n    >\n      <Droppable droppableId={status}>\n        {(provided, snapshot) => (\n          <DroppableRoot\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {items.map((item, index) => {\n              return (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      key={item.id}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <TaskboardItemCard\n                        item={item}\n                        status={status}\n                        isDragging={snapshot.isDragging}\n                        onEdit={onEdit}\n                        onDelete={onDelete}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              );\n            })}\n            {provided.placeholder}\n          </DroppableRoot>\n        )}\n      </Droppable>\n    </TaskboardColRoot>\n  );\n}\n\nexport default TaskboardCol;\n","import { DragDropContext, DragDropContextProps } from 'react-beautiful-dnd';\nimport { useMemo, useState } from 'react';\nimport produce from 'immer';\nimport styled from 'styled-components';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemFormModal, {\n  TaskboardItemFormValues,\n} from './TaskboardItemFormModal';\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol';\nimport { useSyncedState } from '../shared/SharedHooks';\n\nconst generateId = () => Date.now().toString();\n\nconst TaskboardRoot = styled.div`\n  min-height: 0;\n  height: 100%;\n  min-width: 800px;\n  max-width: 1400px;\n  margin: auto;\n`;\n\nconst TaskboardContent = styled.div`\n  height: 100%;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst defaultItems = {\n  [TaskboardItemStatus.TO_DO]: [],\n  [TaskboardItemStatus.IN_PROGRESS]: [],\n  [TaskboardItemStatus.DONE]: [],\n};\n\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\n\nfunction Taskboard() {\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\n    'itemsByStatus',\n    defaultItems\n  );\n\n  const handleDragEnd: DragDropContextProps['onDragEnd'] = ({\n    source,\n    destination,\n  }) => {\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        // dropped outside the list\n        if (!destination) {\n          return;\n        }\n        const [removed] = draft[\n          source.droppableId as TaskboardItemStatus\n        ].splice(source.index, 1);\n        draft[destination.droppableId as TaskboardItemStatus].splice(\n          destination.index,\n          0,\n          removed\n        );\n      })\n    );\n  };\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\n\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\n    setItemToEdit(itemToEdit);\n    setIsModalVisible(true);\n  };\n\n  const closeTaskItemModal = () => {\n    setItemToEdit(null);\n    setIsModalVisible(false);\n  };\n\n  const handleDelete: TaskboardColProps['onDelete'] = ({\n    status,\n    itemToDelete,\n  }) =>\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        draft[status] = draft[status].filter(\n          (item) => item.id !== itemToDelete.id\n        );\n      })\n    );\n\n  const initialValues = useMemo<TaskboardItemFormValues>(\n    () => ({\n      title: itemToEdit?.title ?? '',\n      description: itemToEdit?.description ?? '',\n    }),\n    [itemToEdit]\n  );\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <TaskboardRoot>\n          <TaskboardContent>\n            {Object.values(TaskboardItemStatus).map((status) => (\n              <TaskboardCol\n                key={status}\n                status={status}\n                items={itemsByStatus[status]}\n                onClickAdd={\n                  status === TaskboardItemStatus.TO_DO\n                    ? () => openTaskItemModal(null)\n                    : undefined\n                }\n                onEdit={openTaskItemModal}\n                onDelete={handleDelete}\n              />\n            ))}\n          </TaskboardContent>\n        </TaskboardRoot>\n      </DragDropContext>\n      <TaskboardItemFormModal\n        visible={isModalVisible}\n        onCancel={closeTaskItemModal}\n        onOk={(values) => {\n          setItemsByStatus((current) =>\n            produce(current, (draft) => {\n              if (itemToEdit) {\n                // Editing existing item\n                const draftItem = Object.values(draft)\n                  .flatMap((items) => items)\n                  .find((item) => item.id === itemToEdit.id);\n                if (draftItem) {\n                  draftItem.title = values.title;\n                  draftItem.description = values.description;\n                }\n              } else {\n                // Adding new item as \"to do\"\n                draft[TaskboardItemStatus.TO_DO].push({\n                  ...values,\n                  id: generateId(),\n                });\n              }\n            })\n          );\n        }}\n        initialValues={initialValues}\n      />\n    </>\n  );\n}\n\nexport default Taskboard;\n","import { goTrySync } from 'go-try';\nimport React, { useCallback, useEffect, useState } from 'react';\n\n// Syncs state to localStorage and vice versa\nexport function useSyncedState<T>(\n  key: string,\n  initialValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const getValueFromStorage = useCallback(\n    () =>\n      goTrySync(() => JSON.parse(localStorage.getItem(key) ?? '')).data ??\n      initialValue,\n    [initialValue, key]\n  );\n\n  const [state, setState] = useState<T>(() => getValueFromStorage());\n\n  useEffect(() => {\n    function handleStorageChange() {\n      setState(getValueFromStorage);\n    }\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [getValueFromStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import { Typography } from 'antd';\nimport Layout, { Content, Header } from 'antd/lib/layout/layout';\nimport styled from 'styled-components';\nimport { colors } from '../shared/SharedUtils';\nimport Taskboard from '../taskboard/Taskboard';\n\nconst StyledLayout = styled(Layout)`\n  /* We can't use \"height: 100vh; width: 100vw;\" here.\n  Otherwise, when there is a horizontal scrollbar etc, \n  because that we set a constant height, there will be a vertical one too.  */\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst StyledHeader = styled(Header)`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n`;\n\nconst StyledContent = styled(Content)`\n  background-color: ${colors.primary[6]};\n`;\n\nfunction App() {\n  return (\n    <StyledLayout>\n      <StyledHeader>\n        <Typography.Title level={3} type=\"secondary\">\n          Drag & Drop Taskboard\n        </Typography.Title>\n      </StyledHeader>\n      <StyledContent>\n        <Taskboard />\n      </StyledContent>\n    </StyledLayout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}